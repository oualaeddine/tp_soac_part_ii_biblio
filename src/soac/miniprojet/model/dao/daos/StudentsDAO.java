package soac.miniprojet.model.dao.daos;
// Generated 7 janv. 2020 11:56:55 by Hibernate Tools 5.4.7.Final

import soac.miniprojet.model.beans.Students;
import soac.miniprojet.model.beans.StudentsBiblioInsc;
import soac.miniprojet.model.dao.DAO;
import soac.miniprojet.model.dao.DAOInterface;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.LinkedList;


/**
 * Students generated by hbm2java
 */
public class StudentsDAO extends DAO implements DAOInterface {
    @Override
    public Object getById(int id) {
        ResultSet result;
        try {
            result = statement.executeQuery("SELECT * FROM Students WHERE id=" + id);
            if (result.next()) {
                Students student = new Students();
                student.setId(result.getInt("id"));
                student.setNom(result.getString("nom"));
                student.setPrenom(result.getString("prenom"));
                student.setDateNaiss(result.getDate("date"));
                student.setSexe(result.getString("sexe"));
                student.setNumBac(result.getString("num_bac"));
                student.setDateInsc(result.getDate("date_insc"));
                return student;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public boolean deleteById(int id) {
        return deleteById(id, "Students");
    }

    @Override
    public boolean update(Object object) {

        Students student = (Students) object;
        try {
            statement.execute("UPDATE Students SET " +
                    "nom = '" + student.getNom() + "'," +
                    "prenom = '" + student.getPrenom() + "'," +
                    "date_naiss = '" + new SimpleDateFormat("yyyy-MM-dd").format(student.getDateNaiss()) + "'," +
                    "sexe = '" + student.getSexe() + "'," +
                    "num_bac = '" + student.getNumBac() + "'" +

                    " WHERE Students.id=" + student.getId() + ";");
            return true;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    public boolean add(Object object) {
        Students student = (Students) object;
        try {
            statement.execute("INSERT INTO Students (nom, prenom, date_naiss, sexe, num_bac, date_insc) " +
                    "VALUES(" +
                    "'" + student.getNom() + "'," +
                    "'" + student.getPrenom() + "'," +
                    "'" + new SimpleDateFormat("yyyy-MM-dd").format(student.getDateNaiss()) + "'," +
                    "'" + student.getSexe() + "'," +
                    "'" + student.getNumBac() + "'," +
                    " now() " +
                    ");");
            return true;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    public LinkedList<Students> getAll() {
        LinkedList<Students> list = new LinkedList<>();
        ResultSet result;
        try {
            result = statement.executeQuery("SELECT *\n" +
					"FROM students,\n" +
					"     students_biblio_insc,\n" +
					"     biblio_insc_period\n" +
					"where students.id = student_id\n" +
					"  and students_biblio_insc.biblio_insc_period_id = biblio_insc_period.id\n" +
					"  and biblio_insc_period.id = (SELECT id FROM biblio_insc_period ORDER BY id DESC LIMIT 1)");
            while (result.next()) {
                Students student = new Students();
                student.setId(result.getInt("id"));
                student.setNom(result.getString("nom"));
                student.setPrenom(result.getString("prenom"));
                student.setDateNaiss(result.getDate("date_naiss"));
                student.setSexe(result.getString("sexe"));
                student.setNumBac(result.getString("num_bac"));
                student.setDateInsc(result.getDate("date_insc"));
                list.add(student);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }

    public int countAll() {
        ResultSet result;
        try {
            result = statement.executeQuery("SELECT count(id) FROM Students;");
            if (result.next()) {
                return result.getInt("count(id)");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return 0;
    }


    public boolean Reinscrire(StudentsBiblioInsc studentInscription) {
        try {
            statement.execute("insert into students_biblio_insc (student_id, biblio_insc_period_id) value "
                    + "(" + studentInscription.getStudent().getId() +
                    ", (SELECT id from biblio_insc_period ORDER BY id DESC LIMIT 1))");
            return true;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public LinkedList<Students> getRegisteredStudentsForThisYear(int currentYearId) {

        LinkedList<Students> list = new LinkedList<>();
        ResultSet result;
        try {
            result = statement.executeQuery("SELECT * FROM Students,students_biblio_insc,biblio_insc_period " +
                    "where student_id = students.id " +
                    "and students_biblio_insc.biblio_insc_period_id = biblio_insc_period.id" +
                    " and biblio_insc_period.year = " + currentYearId+";");
            while (result.next()) {
                Students student = new Students();
                student.setId(result.getInt("id"));
                student.setNom(result.getString("nom"));
                student.setPrenom(result.getString("prenom"));
                student.setDateNaiss(result.getDate("date_naiss"));
                student.setSexe(result.getString("sexe"));
                student.setNumBac(result.getString("num_bac"));
                student.setDateInsc(result.getDate("date_insc"));
                list.add(student);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return list;
    }
}
